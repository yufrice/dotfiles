" denite
nnoremap <silent> ,uy :<C-u>Denite neoyank<CR>
nnoremap <silent> ,uf :<C-u>Denite fire_rec<CR>
nnoremap <silent> ,ug :<C-u>Denite grep<CR>
nnoremap <silent> ,uu :<C-u>Denite file_mru buffer<CR>

" VimShell
nmap <Leader>sh :Deol<CR>

" deoplate
let g:deoplete#enable_at_startup = 1
let g:deoplate#auto_complete_start_length=1
let g:deoplete#enable_smart_case = 1
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#auto_complete_start_length = 1
inoremap <expr><CR> pumvisible() ? deoplete#close_popup() : "<CR>"

" deoplete-clang
let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm/7/lib64/libclang.so'
let g:deoplete#sources#clang#clang_header = '/usr/lib/clang/'
let g:deoplete#sources#clang#sort_algo = 'priority'
let g:deoplete#sources#clang#std = {'cpp' : 'c++2a'}

" clang-format
let g:clang_format#code_style = 'Chromium'
let g:clang_format#style_options = {
      \ 'BasedOnStyle' : 'Chromium',
      \ 'AlignAfterOpenBracket' : 'true',
      \ 'AlignConsecutiveAssignments' : 'true',
      \ 'AlignTrailingComments' : 'true',
      \ 'AllowShortCaseLabelsOnASingleLine' : 'true',
      \ 'AlwaysBreakTemplateDeclarations' : 'true',
      \ 'BinPackArguments' : 'true',
      \ 'BreakBeforeBraces' : 'Attach',
      \ 'ConstructorInitializerAllOnOneLineOrOnePerLine' : 'true',
      \ 'NamespaceIndentation' : 'All',
      \ }
augroup cpp_format
  autocmd!
  autocmd BufWrite *.*pp ClangFormat
augroup END

" lisp
let g:slimv_swank_cmd = '! tmux new-window -d -n REPL-SBCL "sbcl --load ~/.vim/dein/repos/github.com/kovisoft/slimv/slime/start-swank.lisp"'
let g:slimv_repl_split = 'REPL'
let g:slimv_repl_simple_eval = 0
let g:slimv_lisp = '/usr/bin/sbcl'
let g:slimv_impl = 'sbcl'
let g:slimv_preferred = 'sbcl'


" togle comment
nmap <Leader><Space> <Plug>(caw:hatpos:toggle)
vmap <Leader><Space> <Plug>(caw:hatpos:toggle)


"tmux
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>

"seiya
" let g:seiya_auto_enable=1

"lightline.vim
let g:lightline = {
      \ 'colorscheme': 'hybrid'
      \ }
let g:lightline.active = {}
let g:lightline.inactive = {}

"vim-indent-guides
" let g:indent_guides_auto_colors=0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=110
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=140
" let g:indent_guides_enable_on_vim_startup=1
" let g:indent_guides_guide_size=1

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" rust
let g:rustfmt_autosave = 1
let g:rustfmt_command = "$HOME/.cargo/bin/rustfmt"
set hidden
let g:raser_cmd = "$HOME/.cargo/bin/racer"
let $RUST_SRC_PATH="$HOME/src/rust"

" indentLine
let g:indentLine_color_term = 111
let g:indentLine_color_gui = '#708090'
let g:indentLine_char = '|'

" vim-latex
let g:vimtex_compiler_progname = 'nvr'
let g:vimtex_compiler_latexmk = {
      \ 'options' : [
      \   '-verbose',
      \   '-file-line-error',
      \   '-synctex=1',
      \   '-interaction=nonstopmode',
      \ ]}

" caml
let g:opamshare = '$HOME/.opam/system/share'
call dein#add(g:opamshare . "/merlin/vim", {'lazy': 1, 'on_ft': 'ocaml', 'on_event': 'InsertEnter'})
call dein#add(g:opamshare . "/ocp-indent/vim", {'lazy': 1, 'on_ft': 'ocaml', 'on_event': 'InsertEnter'})
let g:deoplete#omni_patterns = {}
let g:deoplete#omni_patterns.ocaml = '[^. *\t]\.\w*\|\h\w*|#'
let g:neomake_ocaml_checkers = ['merlin']

" NERD
nmap <Leader>e :NERDTree<CR>

" ale
let g:ale_linters = {
      \ 'python': ['flake8'],
      \}

let g:ale_lint_on_text_changed = 0

let g:ale_fixers = {
      \ 'python': ['black']
      \}
let g:ale_fix_on_save = 1

let g:ale_sign_column_always = 1


" lsp
let g:LanguageClient_serverCommands = {
      \ 'haskell': ['hie-wrapper'],
      \}

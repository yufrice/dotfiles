" unite
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 200
nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
"  nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> ,uu :<C-u>Unite file_mru buffer<CR>

" Wand box
nmap <Leader>wb :Wandbox<CR>
nmap <leader>wo :WandboxOpenBrowser<CR>

" VimShell
nmap <Leader>sh :VimShell<CR>

" deoplate
let g:deoplete#enable_at_startup = 1
let g:deoplate#auto_complete_start_length=1
let g:deoplete#enable_smart_case = 1
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#auto_complete_start_length = 1

" deoplete-clang
let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so'
let g:deoplete#sources#clang#clang_header = '/usr/lib/clang/'
let g:deoplete#sources#clang#sort_algo = 'priority'

" clang-format
let g:clang_format#code_style = 'Chromium'
" let g:clang_format#style_options = {
"       \ 'AccessModifierOffset' : -4,
"       \ 'AllowShortIfStatementsOnASingleLine' : 'false',
"       \ 'AlwaysBreakTemplateDeclarations' : 'true',
"       \ 'BreakBeforeBraces' : 'Stroustrup',
"       \ }
augroup cpp_format
  autocmd!
  autocmd BufWrite *.cpp ClangFormat
augroup END

" lisp
let g:slimv_swank_cmd = '! xterm -e sbcl --load ~/.vim/dein/repos/github.com/kovisoft/slimv/slime/start-swank.lisp &'
let g:slimv_repl_split = 'REPL'
let g:slimv_repl_simple_eval = 0
let g:slimv_lisp = '/usr/bin/sbcl'
let g:slimv_impl = 'sbcl'
let g:slimv_preferred = 'sbcl'


" togle comment
nmap <Leader><Space> <Plug>(caw:hatpos:toggle)
vmap <Leader><Space> <Plug>(caw:hatpos:toggle)

" memo
map <Leader>mn  :MemoNew<CR>
map <Leader>ml  :MemoList<CR>
map <Leader>mg  :MemoGrep<CR>


" haskell
let g:haskell_conceal = 0
let g:haskell_conceal_wide = 1

let g:haskellmode_completion_ghc = 0
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" quck run
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config['tex'] = {
      \   'command' : 'latexmk',
      \   'outputter' : 'error',
      \   'outputter/error/error' : 'quickfix',
      \   'cmdopt': '-pdfdvi',
      \   'exec': ['%c %o %s']
      \ }
let g:quickrun_config._ = {
      \ 'runner'    : 'vimproc',
      \ 'runner/vimproc/updatetime' : 60,
      \ 'outputter' : 'error',
      \ 'outputter/error/success' : 'buffer',
      \ 'outputter/error/error'   : 'quickfix',
      \ 'outputter/buffer/split'  : ':rightbelow 8sp',
      \ 'outputter/buffer/close_on_empty' : 1,
      \ }
let g:quickrun_config = {
      \   "_" : {
      \       "outputter/buffer/split" : ":botright",
      \       "outputter/buffer/close_on_empty" : 1
      \   },
      \}

let g:quickrun_no_default_key_mappings = 1
nnoremap \r :write<CR>:QuickRun -mode n<CR>        
xnoremap \r :<C-U>write<CR>gv:QuickRun -mode v<CR> 


" twitter
let twitvim_force_ssl = 1 
let twitvim_count = 40

"tmux
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>

"seiya
let g:seiya_auto_enable=1

"lightline.vim
let g:lightline = {
      \ 'colorscheme': 'hybrid'
      \ }
let g:lightline.active = {}
let g:lightline.inactive = {}

"vim-indent-guides
" let g:indent_guides_auto_colors=0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=110
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=140
" let g:indent_guides_enable_on_vim_startup=1
" let g:indent_guides_guide_size=1

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" rust
let g:rustfmt_autosave = 1
let g:rustfmt_command = '$HOME/.multirust/toolchains/nightly/cargo/bin/rustfmt'
set hidden
let g:raser_cmd = "$HOME/.multirust/toolchains/nightly/cargo/bin/racer"
let $RUST_SRC_PATH="$HOME/.rust/src"

" python syntax
let python_highlight_all = 1
